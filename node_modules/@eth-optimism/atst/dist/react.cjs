"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/react.ts
var react_exports = {};
__export(react_exports, {
  attestationStationABI: () => attestationStationABI,
  attestationStationAddress: () => attestationStationAddress,
  attestationStationConfig: () => attestationStationConfig,
  useAttestationStation: () => useAttestationStation,
  useAttestationStationAttest: () => useAttestationStationAttest,
  useAttestationStationAttestationCreatedEvent: () => useAttestationStationAttestationCreatedEvent,
  useAttestationStationAttestations: () => useAttestationStationAttestations,
  useAttestationStationEvent: () => useAttestationStationEvent,
  useAttestationStationRead: () => useAttestationStationRead,
  useAttestationStationVersion: () => useAttestationStationVersion,
  useAttestationStationWrite: () => useAttestationStationWrite,
  usePrepareAttestationStationAttest: () => usePrepareAttestationStationAttest,
  usePrepareAttestationStationWrite: () => usePrepareAttestationStationWrite
});
module.exports = __toCommonJS(react_exports);
var import_wagmi = require("wagmi");
var attestationStationABI = [
  { stateMutability: "nonpayable", type: "constructor", inputs: [] },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "creator",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "about",
        internalType: "address",
        type: "address",
        indexed: true
      },
      { name: "key", internalType: "bytes32", type: "bytes32", indexed: true },
      { name: "val", internalType: "bytes", type: "bytes", indexed: false }
    ],
    name: "AttestationCreated"
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      {
        name: "_attestations",
        internalType: "struct AttestationStation.AttestationData[]",
        type: "tuple[]",
        components: [
          { name: "about", internalType: "address", type: "address" },
          { name: "key", internalType: "bytes32", type: "bytes32" },
          { name: "val", internalType: "bytes", type: "bytes" }
        ]
      }
    ],
    name: "attest",
    outputs: []
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_about", internalType: "address", type: "address" },
      { name: "_key", internalType: "bytes32", type: "bytes32" },
      { name: "_val", internalType: "bytes", type: "bytes" }
    ],
    name: "attest",
    outputs: []
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "", internalType: "address", type: "address" },
      { name: "", internalType: "address", type: "address" },
      { name: "", internalType: "bytes32", type: "bytes32" }
    ],
    name: "attestations",
    outputs: [{ name: "", internalType: "bytes", type: "bytes" }]
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "version",
    outputs: [{ name: "", internalType: "string", type: "string" }]
  }
];
var attestationStationAddress = {
  10: "0xEE36eaaD94d1Cc1d0eccaDb55C38bFfB6Be06C77",
  420: "0xEE36eaaD94d1Cc1d0eccaDb55C38bFfB6Be06C77",
  31337: "0xEE36eaaD94d1Cc1d0eccaDb55C38bFfB6Be06C77"
};
var attestationStationConfig = {
  address: attestationStationAddress,
  abi: attestationStationABI
};
function useAttestationStation(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContract)({
    abi: attestationStationABI,
    address: attestationStationAddress[chainId],
    ...config
  });
}
function useAttestationStationRead(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractRead)({
    abi: attestationStationABI,
    address: attestationStationAddress[chainId],
    ...config
  });
}
function useAttestationStationAttestations(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractRead)({
    abi: attestationStationABI,
    address: attestationStationAddress[chainId],
    functionName: "attestations",
    ...config
  });
}
function useAttestationStationVersion(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractRead)({
    abi: attestationStationABI,
    address: attestationStationAddress[chainId],
    functionName: "version",
    ...config
  });
}
function useAttestationStationWrite(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractWrite)({
    abi: attestationStationABI,
    address: attestationStationAddress[chainId],
    ...config
  });
}
function useAttestationStationAttest(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractWrite)({
    abi: attestationStationABI,
    address: attestationStationAddress[chainId],
    functionName: "attest",
    ...config
  });
}
function usePrepareAttestationStationWrite(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: attestationStationABI,
    address: attestationStationAddress[chainId],
    ...config
  });
}
function usePrepareAttestationStationAttest(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.usePrepareContractWrite)({
    abi: attestationStationABI,
    address: attestationStationAddress[chainId],
    functionName: "attest",
    ...config
  });
}
function useAttestationStationEvent(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractEvent)({
    abi: attestationStationABI,
    address: attestationStationAddress[chainId],
    ...config
  });
}
function useAttestationStationAttestationCreatedEvent(config = {}) {
  const { chain } = (0, import_wagmi.useNetwork)();
  const chainId = config.chainId ?? chain?.id;
  return (0, import_wagmi.useContractEvent)({
    abi: attestationStationABI,
    address: attestationStationAddress[chainId],
    eventName: "AttestationCreated",
    ...config
  });
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  attestationStationABI,
  attestationStationAddress,
  attestationStationConfig,
  useAttestationStation,
  useAttestationStationAttest,
  useAttestationStationAttestationCreatedEvent,
  useAttestationStationAttestations,
  useAttestationStationEvent,
  useAttestationStationRead,
  useAttestationStationVersion,
  useAttestationStationWrite,
  usePrepareAttestationStationAttest,
  usePrepareAttestationStationWrite
});
//# sourceMappingURL=react.cjs.map